/*
Copyright (c) 2015 Michael Vines

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

'use strict';

class Relay16 {

  constructor()
  {
    let USB_VID = 0x0416;
    let USB_PID = 0x5020;

    let HID = require('node-hid');

    // Generated by mapRelays()
    this.relayBitmap = [128, 256, 64, 512, 32, 1024, 16, 2048, 8, 4096, 4, 8192, 2, 16384, 1, 32768];

    console.log('Detected devices:', HID.devices(USB_VID, USB_PID));
    this.hid = new HID.HID(USB_VID, USB_PID);
  }

  set(id, state)
  {
    if (typeof id !== 'number') {
      throw `Invalid relay ID type: ${id}`;
    }
    if (id < 0 || id > 15) {
      throw `Invalid relay ID: ${id}`;
    }
    if (typeof state !== 'boolean') {
      throw `Invalid state: ${state}`;
    }

    return this.read()
      .then(readmask => {
        let bit = Math.pow(2, id);

        // Map the read mask into the write mask
        let mask = 0;
        for (let i = 0; i < 16; i++) {
          if (readmask & this.relayBitmap[i]) {
            mask = mask | Math.pow(2, i);
          }
        }

        if (state) {
          mask = mask | bit;
        } else {
          mask = mask ^ bit;
        }
        return this.write(mask);
      });
  }

  read()
  {
    return new Promise((resolve, reject) => {
      let readCmd = [
        0xD2, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x48, 0x49, 0x44,
        0x43, 0x80, 0x02, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
        0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC
      ];
      this.hid.write(readCmd);

      this.hid.read((err, data) => {
        if (err) {
          return reject('hid read error: ${err}');
        }

        let arr16 = new Uint16Array(1);
        let arr8 = new Uint8Array(arr16.buffer);
        arr8[0] = data[2];
        arr8[1] = data[3];

        let mask = arr16[0];
        return resolve(mask);
      });
    });
  }

  reset()
  {
    let resetCmd = [
      0x71, 0x0E, 0x71, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x48, 0x49, 0x44,
      0x43, 0x2A, 0x02, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
      0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
      0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
      0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC
    ];
    this.hid.write(resetCmd);
    return Promise.resolve();
  }

  write(mask)
  {
    if (typeof mask !== 'number' || mask < 0 || mask > 0xFFFF) {
      throw `Invalid write mask: ${mask}`;
    }

    let writeCmd = [
      0xC3, 0x0E, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x49, 0x44,
      0x43, 0xEE, 0x01, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
      0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
      0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
      0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC
    ];

    let arr16 = new Uint16Array(1);
    let arr8 = new Uint8Array(arr16.buffer);
    arr16[0] = mask;

    writeCmd[2] = arr8[0];
    writeCmd[3] = arr8[1];

    let addCommandChecksum = cmd => {
      let size = cmd[1];
      let checksum = cmd.slice(0, size).reduce((a, b) => a + b, 0);

      let arr32 = new Uint32Array(1);
      let arr8 = new Uint8Array(arr32.buffer);
      arr32[0] = checksum;

      for (let i = 0; i < 4; i++) {
        cmd[size + i] = arr8[i];
      }
      return cmd;
    };

    this.hid.write(addCommandChecksum(writeCmd));
    return Promise.resolve();
  }
}


function timeout(ms) {
  return new Promise((resolve) => setTimeout(() => resolve(), ms));
}


function testRelay()
{
  let relay = new Relay16();

  let p = relay.read()
  .then(() => relay.write(0xFFFF))
  .then(() => timeout(250))
  .then(() => relay.write(0))
  .then(() => timeout(250))
  .then(() => relay.write(0xFFFF))
  .then(() => timeout(250))
  .then(() => relay.write(0))
  .then(() => timeout(500));

  for (let i = 0; i < 16; i++) {
    p = p.then(() => relay.set(i, true))
        .then(() => timeout(100));
  }
  p = p.then(() => timeout(100));
  for (let i = 15; i >= 0; i--) {
    p = p.then(() => relay.set(i, false))
        .then(() => timeout(100));
  }

  p = p.then(() => timeout(500))
  .then(() => relay.write(0xFFFF))
  .then(() => timeout(250))
  .then(() => relay.write(0));
}

function mapRelay()
{
  let relay = new Relay16();

  let relayBitmap = new Array(16);

  // Turn all the relays off
  var p = relay.read().then(() => relay.write(0));

  // Turn on each relay in sequence and read in its bit
  for (let i = 0; i < 16; i++) {
    p = p.then(() => relay.write(Math.pow(2, i)))
    .then(() => relay.read())
    .then(mask => {
      relayBitmap[i] = mask;
    })
    .then(() => timeout(100));
  }

  // Clear all the relays
  p = p.then(() => relay.write(0));

  // Write out the bitmap
  p.then(() => {
    console.log('\nRelay bitmap:\n');
    console.log(`  let relayBitmap = [${relayBitmap}]`);
  });

  p = p.then(() => relay.write(0));
}


function usage(msg)
{
  let [node, program] = process.argv;

  if (msg) {
    console.log(`${msg}\n`);
  }

  console.log(`Usage: ${node} ${program} <command>

Available commands:
  on <N>    - Turn relay N on
  off <N>   - Turn relay N off
  test      - Run a test pattern to ensure all relays are functioning
  reset     - Reset the device state, turn off all the relays
  `);

  process.exit(msg ? 1 : 0); // eslint-disable-line no-process-exit
}


let [,, cmd, param] = process.argv;
if (!cmd) {
  usage();
} else {
  switch (cmd) {
  case 'on':
    if (!param) {
      usage('Error: missing relay ID parameter');
    }
    new Relay16().set(+param, true);
    break;
  case 'off':
    if (!param) {
      usage('Error: missing relay ID parameter');
    }
    new Relay16().set(+param, false);
    break;
  case 'map':
    mapRelay();
    break;
  case 'test':
    testRelay();
    break;
  case 'reset':
  {
    let relay = new Relay16();
    relay.reset()
    .then(() => relay.read())
    .then(() => relay.write(0));
    break;
  }
  default:
    usage(`Error: Unknown command: ${cmd}`);
    break;
  }
}
